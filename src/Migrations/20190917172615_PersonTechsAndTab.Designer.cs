// <auto-generated />
using System;
using AssignmentsNetcore.Repositories.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AssignmentsNetcore.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20190917172615_PersonTechsAndTab")]
    partial class PersonTechsAndTab
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("PersonId");

                    b.Property<int>("PersonTechId");

                    b.Property<int?>("PersonTechPersonId");

                    b.Property<int?>("PersonTechTechId");

                    b.Property<int>("PositionId");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("Workload");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("PersonTechPersonId", "PersonTechTechId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Change", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColumnName");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("NewValue");

                    b.Property<string>("PreviousValue");

                    b.Property<string>("TableName");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignmentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int?>("ReviewerId");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("Mail");

                    b.Property<string>("Name");

                    b.Property<int>("OfficeId");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("Workload");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.PersonTech", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("TechId");

                    b.Property<int>("DeveloperRole");

                    b.HasKey("PersonId", "TechId");

                    b.HasIndex("TechId");

                    b.ToTable("PersonTechs");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("TabId");

                    b.Property<int>("TechId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TabId");

                    b.HasIndex("TechId");

                    b.ToTable("Projects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Project");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Tab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProjectStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Tabs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Tab");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Tech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Techs");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsExternal");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Commercial", b =>
                {
                    b.HasBaseType("AssignmentsNetcore.Models.Database.Project");

                    b.Property<bool>("IsTeamAugmentation");

                    b.HasDiscriminator().HasValue("Commercial");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.HHII", b =>
                {
                    b.HasBaseType("AssignmentsNetcore.Models.Database.Project");

                    b.Property<int>("ToolStatus");

                    b.HasDiscriminator().HasValue("HHII");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Training", b =>
                {
                    b.HasBaseType("AssignmentsNetcore.Models.Database.Tab");

                    b.Property<bool>("Individual");

                    b.Property<bool>("Remote");

                    b.Property<int>("TrainingStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasDiscriminator().HasValue("Training");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Assignment", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.Person")
                        .WithMany("Assignments")
                        .HasForeignKey("PersonId");

                    b.HasOne("AssignmentsNetcore.Models.Database.Position", "Position")
                        .WithMany("Assigments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AssignmentsNetcore.Models.Database.Project", "Project")
                        .WithMany("Assignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AssignmentsNetcore.Models.Database.PersonTech", "PersonTech")
                        .WithMany()
                        .HasForeignKey("PersonTechPersonId", "PersonTechTechId");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Change", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Feedback", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.Assignment", "Assignment")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("AssignmentsNetcore.Models.Database.Person", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Office", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.Country", "Country")
                        .WithMany("Offices")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Person", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.PersonTech", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.Person", "Person")
                        .WithMany("Techs")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AssignmentsNetcore.Models.Database.Tech", "Tech")
                        .WithMany("Persons")
                        .HasForeignKey("TechId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Project", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId");

                    b.HasOne("AssignmentsNetcore.Models.Database.Tab", "Tab")
                        .WithMany("Projects")
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AssignmentsNetcore.Models.Database.Tech", "Tech")
                        .WithMany()
                        .HasForeignKey("TechId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AssignmentsNetcore.Models.Database.Tab", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AssignmentsNetcore.Models.Database.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AssignmentsNetcore.Models.Database.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
